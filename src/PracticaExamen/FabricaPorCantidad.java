// Define el paquete o carpeta l√≥gica donde se agrupa esta clase.
package PracticaExamen;


// Importaciones necesarias:
import java.util.*; // Para List, Map, HashMap, ArrayList, Random
import java.util.concurrent.Semaphore; // Para limitar el n√∫mero de hilos que acceden a un recurso
import java.util.concurrent.atomic.AtomicInteger; // Para contadores seguros en hilos (thread-safe)
import java.util.concurrent.locks.ReentrantLock; // Para crear secciones cr√≠ticas (bloqueo manual)

/**
 * üè≠ Simulaci√≥n: cada trabajador (hilo) fabrica una cantidad espec√≠fica de coches.
 *
 * Ejemplo tipo examen:
 * - Control de concurrencia con sem√°foro (limitar l√≠neas de montaje)
 * - Uso de AtomicInteger (contadores globales seguros)
 * - Uso de ReentrantLock (proteger el mapa de estad√≠sticas)
 * - Estad√≠sticas al final
 */
// La clase implementa "Runnable", lo que significa que su m√©todo run() 
// puede ser ejecutado por un hilo (Thread).
public class FabricaPorCantidad implements Runnable {

    // --- RECURSOS Y CONTADORES COMPARTIDOS (static) ---

    // üö¶ Sem√°foro: Limita cu√°ntos hilos pueden ejecutar una secci√≥n de c√≥digo a la vez.
    // new Semaphore(3, true) -> 3 "permisos" (l√≠neas de montaje).
    // "true" (fairness): los hilos que lleguen primero, entrar√°n primero.
    private static final Semaphore semaforo = new Semaphore(3, true);

    // üßÆ Contadores globales "at√≥micos" (thread-safe).
    // Usar "int++" en hilos dar√≠a resultados incorrectos (condici√≥n de carrera).
    // "AtomicInteger" garantiza que las operaciones (como incrementar) sean indivisibles.
    private static final AtomicInteger totalFabricado = new AtomicInteger(0); // Total de coches
    private static final AtomicInteger enProduccion = new AtomicInteger(0); // Cu√°ntos hilos est√°n trabajando AHORA

    // üìä Registro por trabajador: Guardar√° cu√°ntos coches ha hecho CADA hilo.
    // Un "HashMap" NO ES thread-safe. Si varios hilos escriben en √©l a la vez,
    // puede corromperse. Por eso necesitaremos un "Lock" para protegerlo.
    private static final Map<String, Integer> produccionPorTrabajador = new HashMap<>();

    // üîí Candado (Lock) para proteger el "produccionPorTrabajador".
    // "ReentrantLock" es un candado manual. Solo un hilo puede "tener" el candado a la vez.
    private static final ReentrantLock lock = new ReentrantLock();

    // üî¢ Mapa de asignaciones: Define cu√°ntos coches debe fabricar cada trabajador.
    // Es "static" para que todos los hilos puedan leerlo.
    // No necesita "lock" porque se rellena en el "main" ANTES de arrancar los hilos
    // y despu√©s solo se "lee" (lo cual es seguro).
    private static final Map<String, Integer> asignaciones = new HashMap<>();


    // --- PUNTO DE ENTRADA DEL PROGRAMA ---
    public static void main(String[] args) {
        System.out.println("üè≠ Iniciando simulaci√≥n con cantidades por trabajador...\n");

        // Asignamos cu√°ntos coches fabricar√° cada trabajador
        // Esto se hace en el hilo "main", ANTES de crear los hilos "trabajador".
        asignaciones.put("Trabajador_1", 4);
        asignaciones.put("Trabajador_2", 8);
        asignaciones.put("Trabajador_3", 6);
        asignaciones.put("Trabajador_4", 10);
        asignaciones.put("Trabajador_5", 3);
        asignaciones.put("Trabajador_6", 5);
        asignaciones.put("Trabajador_7", 9);
        asignaciones.put("Trabajador_8", 2);

        // Lista para guardar los hilos (trabajadores) y poder "esperar" a que terminen
        List<Thread> trabajadores = new ArrayList<>();

        // Creamos un hilo por cada trabajador definido en el mapa "asignaciones"
        for (String nombre : asignaciones.keySet()) {
            // Creamos un nuevo Hilo (Thread).
            // Le pasamos una "tarea": una *nueva instancia* de FabricaPorCantidad (un Runnable).
            // Le ponemos un "nombre": ("Trabajador_1", "Trabajador_2", etc.)
            Thread t = new Thread(new FabricaPorCantidad(), nombre);
            trabajadores.add(t); // Lo guardamos en la lista
            t.start(); // Iniciamos el hilo. Ahora empieza a ejecutar su m√©todo run().
        }

        // Esperamos que todos los hilos terminen (join)
        // El hilo "main" (este) se queda aqu√≠ esperando.
        for (Thread t : trabajadores) {
            try {
                // t.join() pausa el hilo "main" hasta que el hilo 't' haya terminado
                // (es decir, hasta que su m√©todo run() acabe).
                t.join();
            } catch (InterruptedException e) {
                System.err.println("Error esperando al hilo: " + t.getName());
            }
        }

        // Cuando todos los hilos han terminado (han salido del bucle "join"),
        // el hilo "main" contin√∫a y muestra las estad√≠sticas.
        mostrarEstadisticas();
    }

    // --- C√ìDIGO QUE EJECUTAR√Å CADA HILO (TRABAJADOR) ---
    @Override
    public void run() {
        // Obtenemos el nombre del hilo actual (ej: "Trabajador_1")
        String nombre = Thread.currentThread().getName();
        // Obtenemos la cantidad de coches que DEBE fabricar este hilo.
        // (Lectura segura del mapa "asignaciones", ya que no se est√° modificando).
        int cantidadAsignada = asignaciones.get(nombre);

        // Bucle de trabajo: fabricar el n√∫mero de coches asignado
        // (ej: si le tocaron 4, el bucle va de i=1 a i=4)
        for (int i = 1; i <= cantidadAsignada; i++) {
            try {
                // --- INICIO DE LA SECCI√ìN CR√çTICA (CONTROLADA POR SEM√ÅFORO) ---

                // 1. Pedir permiso (Adquirir una l√≠nea de montaje)
                // El hilo intenta "adquirir" un permiso del sem√°foro.
                // Si hay permisos (sem√°foro > 0), lo coge y sigue.
                // Si no hay permisos (sem√°foro = 0, las 3 l√≠neas est√°n ocupadas),
                // el hilo se BLOQUEA aqu√≠ y espera.
                semaforo.acquire();

                // 2. Permiso concedido (estamos en una l√≠nea de montaje)
                enProduccion.incrementAndGet(); // Incremento at√≥mico
                System.out.println("üîß " + nombre + " fabricando coche " + i + "/" + cantidadAsignada
                        + " [L√≠neas ocupadas: " + enProduccion.get() + "]");

                // 3. Simular tiempo de trabajo (fabricaci√≥n)
                // El hilo se "duerme" un tiempo aleatorio.
                // IMPORTANTE: Mientras duerme, SIGUE teniendo el permiso del sem√°foro.
                Thread.sleep(200 + new Random().nextInt(300)); // Simula entre 200 y 500 ms

                // 4. Coche terminado (Actualizar contadores)
                totalFabricado.incrementAndGet(); // Incremento at√≥mico

                // 5. Actualizar el MAPA de estad√≠sticas (secci√≥n cr√≠tica del Lock)
                lock.lock(); // Echamos el candado. Solo 1 hilo puede estar aqu√≠ a la vez.
                try {
                    // Esta operaci√≥n (put) sobre el HashMap NO es segura sin el "lock".
                    // getOrDefault(nombre, 0) -> coge el valor actual, o 0 si no existe
                    produccionPorTrabajador.put(nombre,
                            produccionPorTrabajador.getOrDefault(nombre, 0) + 1);
                } finally {
                    // Es VITAL liberar el candado en un 'finally'
                    // para asegurar que se libere incluso si hay un error dentro del 'try'.
                    lock.unlock(); // Soltamos el candado
                }

                System.out.println("‚úÖ " + nombre + " termin√≥ coche " + i + "/" + cantidadAsignada);

            } catch (InterruptedException e) {
                // Esto pasa si el hilo es "interrumpido" (por ej. desde fuera)
                // mientras estaba en sleep() o en acquire().
                System.err.println("‚ö†Ô∏è " + nombre + " interrumpido.");
            } finally {
                // --- FIN DE LA SECCI√ìN CR√çTICA (CONTROLADA POR SEM√ÅFORO) ---

                // 6. Liberar la l√≠nea de montaje (SIEMPRE)
                // Este bloque 'finally' se ejecuta SIEMPRE,
                // tanto si el 'try' ha ido bien como si ha fallado (catch).
                // Es crucial para evitar "fugas" de permisos del sem√°foro.
                enProduccion.decrementAndGet(); // Decremento at√≥mico
                semaforo.release(); // El hilo devuelve el permiso al sem√°foro.
                // Ahora, otro hilo que estaba esperando en acquire() puede entrar.
            }
        } // Fin del bucle FOR (el trabajador ha hecho un coche m√°s)

        // El trabajador ha terminado TODOS sus coches asignados
        System.out.println("üèÅ " + nombre + " termin√≥ sus " + cantidadAsignada + " coches asignados.");
    } // El m√©todo run() termina y el hilo "muere".

    // ---------------------------------------------------------------

    // üìä M√©todo est√°tico para mostrar estad√≠sticas al final
    // Es "static" porque se llama desde el m√©todo "static main".
    private static void mostrarEstadisticas() {
        System.out.println("\n===== üìä ESTAD√çSTICAS DE PRODUCCI√ìN =====");
        int totalPorMapa = 0; // Contador local para verificar

        // Aunque los hilos trabajadores ya han terminado, es una buena pr√°ctica
        // usar el "lock" al leer el mapa, para asegurar la "visibilidad"
        // de los cambios hechos por otros hilos.
        lock.lock();
        try {
            // Recorremos el mapa de estad√≠sticas
            for (String trabajador : produccionPorTrabajador.keySet()) {
                int num = produccionPorTrabajador.get(trabajador);
                totalPorMapa += num; // Sumamos al total local
                System.out.println("üë∑ " + trabajador + " fabric√≥ " + num + " coches.");
            }
        } finally {
            lock.unlock(); // Liberamos el candado de lectura
        }

        System.out.println("--------------------------------------------");
        // Mostramos el total contado sumando los valores del mapa
        System.out.println("üì¶ Total seg√∫n mapa: " + totalPorMapa);
        // Mostramos el total contado por el AtomicInteger
        System.out.println("üßÆ Total global contado: " + totalFabricado.get());

        // NOTA: Ambos totales (totalPorMapa y totalFabricado) DEBEN ser iguales.
        // Si no lo fueran, tendr√≠amos un error de concurrencia.

        System.out.println("============================================");
    }
}