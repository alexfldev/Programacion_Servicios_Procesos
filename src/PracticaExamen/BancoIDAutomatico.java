// Define el paquete o carpeta l√≥gica donde se agrupa esta clase.
package PracticaExamen;

// Importaciones necesarias:
import java.util.*; // Para List, Map, HashMap, Random
import java.util.concurrent.Semaphore; // Para limitar el n√∫mero de hilos que acceden a un recurso
import java.util.concurrent.atomic.AtomicInteger; // Para contadores seguros en hilos (thread-safe)
import java.util.concurrent.locks.ReentrantLock; // Para crear secciones cr√≠ticas (bloqueo manual)

/**
 * üè¶ Ejercicio tipo examen:
 * Simulaci√≥n de un banco multihilo donde varios cajeros atienden clientes.
 *
 * - Cada cliente tiene un ID √∫nico (usando AtomicInteger)
 * - Solo 3 ventanillas pueden atender a la vez (Semaphore)
 * - Evitamos condici√≥n de carrera usando ReentrantLock
 * - Al final se muestran estad√≠sticas
 */
// La clase implementa "Runnable", lo que significa que su m√©todo run()
// puede ser ejecutado por un hilo (Thread).
public class BancoIDAutomatico implements Runnable {

    // ‚è±Ô∏è Duraci√≥n de la simulaci√≥n (en milisegundos)
    // "static": es una variable de clase, compartida por todos los hilos.
    // "final": es una constante, no se puede cambiar.
    // System.currentTimeMillis() coge la hora actual y le suma 5 segundos.
    private static final long TIEMPO_SIMULACION = System.currentTimeMillis() + 5000;

    // üíº Solo 3 ventanillas disponibles (m√°ximo 3 hilos a la vez)
    // Un Sem√°foro inicializado con 3 "permisos".
    // "true" (fairness): los hilos que lleguen primero, entrar√°n primero.
    private static final Semaphore semaforo = new Semaphore(3, true);

    // üßÆ Generador de ID √∫nico para cada cliente (seguro entre hilos)
    // "AtomicInteger" garantiza que la operaci√≥n "incrementar" sea at√≥mica,
    // es decir, dos hilos no obtendr√°n el mismo ID.
    private static final AtomicInteger generadorID = new AtomicInteger(0);

    // üßæ Contadores globales at√≥micos (thread-safe)
    private static final AtomicInteger totalClientesAtendidos = new AtomicInteger(0);
    private static final AtomicInteger ventanillasOcupadas = new AtomicInteger(0); // Para control

    // üìä Mapa: cu√°ntos clientes atendi√≥ cada cajero
    // Un HashMap NO es "thread-safe". Si varios hilos escriben en √©l a la vez,
    // puede corromperse. Por eso necesitaremos un "Lock".
    private static final Map<String, Integer> clientesPorCajero = new HashMap<>();

    // üîí Lock para proteger el acceso al mapa "clientesPorCajero"
    // "ReentrantLock" es un candado manual.
    private static final ReentrantLock lock = new ReentrantLock();

    // --- PUNTO DE ENTRADA DEL PROGRAMA ---
    public static void main(String[] args) {
        System.out.println("üè¶ Iniciando simulaci√≥n del banco con IDs autom√°ticos...\n");

        // Lista para guardar los threads (cajeros) y poder esperar a que terminen
        List<Thread> cajeros = new ArrayList<>();

        // Creamos 8 cajeros (8 hilos)
        for (int i = 1; i <= 8; i++) {
            // Creamos un hilo.
            // Le pasamos una "tarea": una *nueva instancia* de BancoIDAutomatico.
            // Le ponemos un nombre (ej: "Cajero_1")
            Thread cajero = new Thread(new BancoIDAutomatico(), "Cajero_" + i);
            cajeros.add(cajero); // Lo guardamos en la lista
            cajero.start(); // Iniciamos el hilo. Ahora empieza a ejecutar su m√©todo run().
        }

        // Esperar a que todos los cajeros terminen su jornada
        // El hilo "main" (este) se queda aqu√≠ esperando.
        for (Thread t : cajeros) {
            try {
                // t.join() pausa el hilo "main" hasta que el hilo 't' haya terminado
                // (es decir, hasta que su m√©todo run() acabe).
                t.join();
            } catch (InterruptedException e) {
                System.err.println("Error esperando al hilo: " + t.getName());
            }
        }

        // Cuando todos los hilos han terminado (han salido de join),
        // el hilo "main" contin√∫a y muestra las estad√≠sticas.
        mostrarEstadisticas();
    }

    // --- C√ìDIGO QUE EJECUTAR√Å CADA HILO (CAJERO) ---
    @Override
    public void run() {
        // Cada hilo representa un cajero
        String nombre = Thread.currentThread().getName(); // "Cajero_X"
        Random random = new Random(); // Para simular tiempos de atenci√≥n

        // Mientras dure la simulaci√≥n (mientras la hora actual sea menor al tiempo final)
        while (System.currentTimeMillis() < TIEMPO_SIMULACION) {
            try {
                // 1. PEDIR PERMISO (Adquirir una ventanilla)
                // El hilo intenta "adquirir" un permiso del sem√°foro.
                // Si hay permisos (sem√°foro > 0), lo coge y sigue.
                // Si no hay permisos (sem√°foro = 0), el hilo se BLOQUEA aqu√≠ y espera.
                semaforo.acquire();
                ventanillasOcupadas.incrementAndGet(); // (At√≥mico)

                // --- INICIO DE LA SECCI√ìN CR√çTICA (VENTANILLA OCUPADA) ---

                // 2. CREAR CLIENTE
                // incrementAndGet() suma 1 y devuelve el nuevo valor de forma at√≥mica.
                int idCliente = generadorID.incrementAndGet();
                System.out.println(nombre + " atendiendo al cliente con ID: " + idCliente
                        + " [Ventanillas: " + ventanillasOcupadas.get() + "]");

                // 3. SIMULAR TIEMPO DE ATENCI√ìN
                // El hilo se "duerme" un tiempo aleatorio entre 200 y 400 ms.
                Thread.sleep(200 + random.nextInt(200));

                // 4. CLIENTE ATENDIDO (Actualizar contadores)
                totalClientesAtendidos.incrementAndGet(); // (At√≥mico)

                // 5. ACTUALIZAR MAPA (ESTAD√çSTICA POR CAJERO)
                // Esta es una zona cr√≠tica porque el HashMap NO es thread-safe.
                lock.lock(); // Echamos el candado. Solo 1 hilo puede estar aqu√≠.
                try {
                    // getOrDefault(nombre, 0) obtiene el valor actual del cajero,
                    // o 0 si es la primera vez que atiende a alguien.
                    clientesPorCajero.put(nombre, clientesPorCajero.getOrDefault(nombre, 0) + 1);
                } finally {
                    // Es VITAL liberar el candado en un 'finally'
                    // para asegurar que se libere incluso si hay un error.
                    lock.unlock();
                }

                System.out.println("‚úÖ " + nombre + " termin√≥ con el cliente ID " + idCliente);

            } catch (InterruptedException e) {
                // Esto pasa si el hilo es "interrumpido" (por ej. desde fuera)
                // mientras estaba en sleep() o en acquire().
                System.err.println("‚ö†Ô∏è " + nombre + " interrumpido.");
            } finally {
                // --- FIN DE LA SECCI√ìN CR√çTICA ---

                // 6. LIBERAR VENTANILLA
                // Este bloque 'finally' se ejecuta SIEMPRE,
                // tanto si el 'try' ha ido bien como si ha fallado.
                // Es crucial para evitar "fugas" de permisos.
                ventanillasOcupadas.decrementAndGet(); // (At√≥mico)
                semaforo.release(); // El hilo devuelve el permiso al sem√°foro.
                // Ahora, otro hilo que estaba esperando en acquire() puede entrar.
            }
        } // Fin del bucle while (se acab√≥ el tiempo)

        System.out.println("üèÅ " + nombre + " termin√≥ su jornada laboral.");
    }

    // ---------------------------------------------------------------

    // üìä M√©todo est√°tico para mostrar estad√≠sticas al final
    private static void mostrarEstadisticas() {
        System.out.println("\n===== üìä ESTAD√çSTICAS DEL BANCO =====");

        int totalMapa = 0; // Contador local

        // Bloqueamos el candado para LEER el mapa de forma segura.
        // Si no lo bloqueamos, podr√≠amos leerlo mientras otro hilo
        // (que se haya retrasado) todav√≠a est√° escribiendo en √©l.
        lock.lock();
        try {
            // Recorremos todas las "claves" (nombres de cajero) del mapa
            for (String cajero : clientesPorCajero.keySet()) {
                int cantidad = clientesPorCajero.get(cajero); // Obtenemos el valor
                totalMapa += cantidad; // Sumamos al total local
                System.out.println("üë®‚Äçüíº " + cajero + " atendi√≥ a " + cantidad + " clientes.");
            }
        } finally {
            lock.unlock(); // Liberamos el candado
        }

        System.out.println("---------------------------------------------");
        // El total sumado del mapa
        System.out.println("üßæ Total clientes (seg√∫n mapa): " + totalMapa);
        // El total del contador at√≥mico global
        // (Deber√≠an coincidir)
        System.out.println("üöÄ Total global contado: " + totalClientesAtendidos.get());
        System.out.println("=============================================\n");
    }
}