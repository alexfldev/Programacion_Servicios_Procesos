// Define el paquete o carpeta l√≥gica donde se agrupa esta clase.
package PracticaExamen;

// Importaciones necesarias:
import java.util.*; // Para List, Map, HashMap, ArrayList, Random
import java.util.concurrent.Semaphore; // Para limitar el n√∫mero de hilos que acceden a un recurso
import java.util.concurrent.atomic.AtomicInteger; // Para contadores seguros en hilos (thread-safe)
import java.util.concurrent.locks.ReentrantLock; // Para crear secciones cr√≠ticas (bloqueo manual)

/**
 * üè≠ Simulaci√≥n de una f√°brica multihilo (versi√≥n mejorada tipo examen)
 *
 * ‚úÖ Varios trabajadores (threads) fabrican productos.
 * ‚úÖ Cada producto tiene un ID √∫nico generado con AtomicInteger.
 * ‚úÖ Solo 3 trabajadores pueden usar la l√≠nea de montaje a la vez (Semaphore).
 * ‚úÖ Se controla la condici√≥n de carrera con ReentrantLock.
 * ‚úÖ Al final se muestran estad√≠sticas completas.
 */
// La clase implementa "Runnable", lo que significa que su m√©todo run() 
// puede ser ejecutado por un hilo (Thread).
public class FabricaCondicionCarrera implements Runnable {

    // --- RECURSOS Y CONTADORES COMPARTIDOS (static) ---

    // ‚è±Ô∏è Duraci√≥n total de la simulaci√≥n (en milisegundos)
    // "static final": es una constante compartida por todos los hilos.
    // Coge la hora actual y le suma 5 segundos (5000 ms).
    private static final long TIEMPO_SIMULACION = System.currentTimeMillis() + 5000;

    // üö¶ Sem√°foro que limita el n√∫mero de l√≠neas de montaje (m√°x 3 hilos a la vez)
    // new Semaphore(3, true) -> 3 "permisos".
    // "true" (fairness): los hilos que lleguen primero, entrar√°n primero.
    private static final Semaphore semaforo = new Semaphore(3, true);

    // üßÆ Contadores seguros (AtomicInteger evita condici√≥n de carrera)
    // Usar "int++" en un entorno multihilo dar√≠a resultados incorrectos.
    // "AtomicInteger" garantiza que las operaciones (como incrementar) sean indivisibles.
    private static final AtomicInteger totalProductosFabricados = new AtomicInteger(0);
    private static final AtomicInteger enProduccion = new AtomicInteger(0); // Para saber cu√°ntos hilos est√°n DENTRO del sem√°foro

    // üî¢ Generador de IDs √∫nicos para productos
    // Asegura que cada producto tenga un ID √∫nico (1, 2, 3...) sin repeticiones.
    private static final AtomicInteger generadorID = new AtomicInteger(0);

    // üìä Registro de producci√≥n por trabajador
    // Un "HashMap" NO ES thread-safe. Si varios hilos escriben en √©l a la vez,
    // puede corromperse. Por eso necesitaremos un "Lock" para protegerlo.
    private static final Map<String, Integer> produccionPorTrabajador = new HashMap<>();

    // üîí Lock para proteger el acceso al mapa compartido "produccionPorTrabajador"
    // "ReentrantLock" es un candado manual.
    private static final ReentrantLock lock = new ReentrantLock();


    // --- CLASE INTERNA ---
    /**
     * üß± Clase interna "static": representa un producto fabricado.
     * Es una simple clase de datos (POJO).
     */
    static class Producto {
        private final int id;         // ID √∫nico del producto
        private final String trabajador; // Nombre del hilo que lo fabric√≥

        // Constructor para crear el producto
        public Producto(int id, String trabajador) {
            this.id = id;
            this.trabajador = trabajador;
        }

        // Sobrescribe el m√©todo toString() para que al imprimir el objeto,
        // muestre un mensaje formateado y legible.
        @Override
        public String toString() {
            return "üÜî Producto " + id + " fabricado por " + trabajador;
        }
    }


    // --- PUNTO DE ENTRADA DEL PROGRAMA (HILO PRINCIPAL) ---
    public static void main(String[] args) {
        System.out.println("üè≠ Iniciando simulaci√≥n de la f√°brica con IDs √∫nicos...\n");

        // Lista para almacenar los threads (trabajadores) y poder esperar a que terminen.
        List<Thread> trabajadores = new ArrayList<>();

        // üîÅ Creamos 8 trabajadores (hilos)
        for (int i = 1; i <= 8; i++) {
            // Creamos un nuevo Hilo (Thread).
            // Le pasamos una "tarea": una *nueva instancia* de FabricaCondicionCarrera (un Runnable).
            // Le ponemos un "nombre": ("Trabajador_1", "Trabajador_2", etc.)
            Thread t = new Thread(new FabricaCondicionCarrera(), "Trabajador_" + i);
            trabajadores.add(t); // Lo guardamos en la lista
            t.start(); // Iniciamos el hilo. Ahora empieza a ejecutar su m√©todo run().
        }

        // ‚è∏Ô∏è Esperamos a que todos los hilos terminen
        // El hilo "main" (este) se queda aqu√≠ esperando.
        for (Thread t : trabajadores) {
            try {
                // t.join() pausa el hilo "main" hasta que el hilo 't' haya terminado
                // (es decir, hasta que su m√©todo run() acabe).
                t.join();
            } catch (InterruptedException e) {
                // Esto pasar√≠a si el hilo "main" es interrumpido mientras espera.
                System.err.println("Error esperando al hilo: " + t.getName());
            }
        }

        // üßæ Mostrar estad√≠sticas finales
        // Esta l√≠nea solo se ejecuta DESPU√âS de que todos los hilos trabajadores
        // hayan terminado (gracias al bucle de "join").
        mostrarEstadisticas();
    }


    // --- C√ìDIGO QUE EJECUTAR√Å CADA HILO (TRABAJADOR) ---
    @Override
    public void run() {
        // Obtenemos el nombre del hilo actual (ej: "Trabajador_1")
        String nombre = Thread.currentThread().getName();
        // Cada hilo tendr√° su propio generador de n√∫meros aleatorios (para el sleep)
        Random random = new Random();

        // Bucle principal del trabajador:
        // El hilo seguir√° trabajando mientras la hora actual sea menor que el tiempo final.
        while (System.currentTimeMillis() < TIEMPO_SIMULACION) {
            try {
                // --- INICIO DE LA SECCI√ìN CR√çTICA (CONTROLADA POR SEM√ÅFORO) ---

                // 1. üö¶ El trabajador pide acceso a la l√≠nea de montaje
                // Intenta "adquirir" un permiso del sem√°foro.
                // Si hay permisos (sem√°foro > 0), lo coge y sigue.
                // Si no hay permisos (sem√°foro = 0, las 3 l√≠neas est√°n ocupadas),
                // el hilo se BLOQUEA aqu√≠ y espera.
                semaforo.acquire();

                // 2. Permiso concedido
                enProduccion.incrementAndGet(); // Incremento at√≥mico
                System.out.println("üîß " + nombre + " est√° fabricando un producto..."
                        + " [L√≠neas ocupadas: " + enProduccion.get() + "]");

                // 3. Simulamos tiempo de producci√≥n (trabajo)
                // El hilo se "duerme" un tiempo aleatorio (entre 200 y 499 ms).
                Thread.sleep(200 + random.nextInt(300));

                // 4. üî¢ Crear un nuevo producto con ID √∫nico
                // "incrementAndGet()" suma 1 y devuelve el nuevo valor (ej: 1, 2, 3...)
                // Es una operaci√≥n at√≥mica, por lo que es segura.
                int idProducto = generadorID.incrementAndGet();
                Producto nuevo = new Producto(idProducto, nombre); // Creamos el objeto

                System.out.println("‚úÖ " + nuevo); // Imprime usando el m√©todo .toString()

                // 5. üßÆ Incrementamos el contador global (at√≥mico)
                totalProductosFabricados.incrementAndGet();

                // 6. üîí Actualizamos el mapa protegido por el lock
                // Esta es la "condici√≥n de carrera" que protegemos.
                lock.lock(); // Echamos el candado. Solo 1 hilo puede estar aqu√≠ a la vez.
                try {
                    // Esta operaci√≥n (put) sobre el HashMap NO es segura sin el "lock".
                    produccionPorTrabajador.put(nombre,
                            produccionPorTrabajador.getOrDefault(nombre, 0) + 1);
                } finally {
                    // Es VITAL liberar el candado en un 'finally'
                    // para asegurar que se libere incluso si hay un error dentro del 'try'.
                    lock.unlock(); // Soltamos el candado
                }

            } catch (InterruptedException e) {
                // Esto pasa si el hilo es "interrumpido" (por ej. desde fuera)
                // mientras estaba en sleep() o en acquire().
                System.err.println("‚ö†Ô∏è " + nombre + " fue interrumpido.");
            } finally {
                // --- FIN DE LA SECCI√ìN CR√çTICA (CONTROLADA POR SEM√ÅFORO) ---

                // 7. üîì Libera el sem√°foro (la l√≠nea de montaje)
                // Este bloque 'finally' se ejecuta SIEMPRE,
                // tanto si el 'try' ha ido bien como si ha fallado (catch).
                // Es crucial para evitar "fugas" de permisos del sem√°foro.
                enProduccion.decrementAndGet(); // Decremento at√≥mico
                semaforo.release(); // El hilo devuelve el permiso al sem√°foro.
                // Ahora, otro hilo que estaba esperando en acquire() puede entrar.
            }
        } // Fin del bucle while (se acab√≥ el tiempo)

        System.out.println("üèÅ " + nombre + " termin√≥ su jornada laboral.");
    } // El m√©todo run() termina y el hilo "muere".


    // --- M√âTODO EST√ÅTICO DE ESTAD√çSTICAS ---
    /**
     * üìä Muestra los resultados finales de la producci√≥n.
     * Se llama desde "main" cuando ya todos los hilos han terminado.
     */
    private static void mostrarEstadisticas() {
        System.out.println("\n===== üìä ESTAD√çSTICAS DE PRODUCCI√ìN =====");

        int totalPorMapa = 0; // Contador local para verificar

        // Bloqueamos el candado (lock) para leer el mapa.
        // Aunque los hilos trabajadores ya han terminado, es una buena pr√°ctica
        // usar el "lock" al leer, para asegurar la "visibilidad"
        // de los cambios hechos por otros hilos (garantiza que leemos la √∫ltima versi√≥n).
        lock.lock();
        try {
            // Recorremos el mapa de estad√≠sticas, trabajador por trabajador
            for (String t : produccionPorTrabajador.keySet()) {
                int cantidad = produccionPorTrabajador.get(t); // Obtenemos lo que fabric√≥
                totalPorMapa += cantidad; // Sumamos al total local
                System.out.println("üë∑ " + t + " fabric√≥ " + cantidad + " productos.");
            }
        } finally {
            lock.unlock(); // Liberamos el candado de lectura
        }

        System.out.println("--------------------------------------------");
        // Mostramos el total contado sumando los valores del mapa
        System.out.println("üì¶ Total seg√∫n mapa (sumando trabajadores): " + totalPorMapa);
        // Mostramos el total contado por el AtomicInteger
        System.out.println("üßÆ Total global contado (AtomicInteger): " + totalProductosFabricados.get());

        // NOTA: Ambos totales (totalPorMapa y totalProductosFabricados) DEBEN ser iguales.
        // Si no lo fueran, tendr√≠amos un error de concurrencia.

        System.out.println("============================================\n");
    }
}