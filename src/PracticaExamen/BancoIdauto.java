package PracticaExamen;

// Define el paquete o carpeta l√≥gica donde se agrupa esta clase.


// Importaciones necesarias:
import java.util.*; // Para List, Map, HashMap, Random
import java.util.concurrent.Semaphore; // Para limitar el n√∫mero de hilos que acceden a un recurso
import java.util.concurrent.atomic.AtomicInteger; // Para contadores seguros en hilos (thread-safe)
import java.util.concurrent.locks.ReentrantLock; // Para crear secciones cr√≠ticas (bloqueo manual)

/**
 * üè¶ Ejercicio tipo examen:
 * Simulaci√≥n de un banco multihilo donde varios cajeros atienden clientes.
 *
 * - Cada cajero tiene un nombre (Ej: "Cajero_1") y un ID num√©rico (Ej: 1)
 * - Cada cliente tiene un ID √∫nico (usando AtomicInteger)
 * - Solo 3 ventanillas pueden atender a la vez (Semaphore)
 * - Evitamos condici√≥n de carrera usando ReentrantLock
 * - Al final se muestran estad√≠sticas
 */
// La clase implementa "Runnable", lo que significa que su m√©todo run()
// puede ser ejecutado por un hilo (Thread).
public class BancoIdauto implements Runnable {

    // ‚è±Ô∏è Duraci√≥n de la simulaci√≥n (en milisegundos)
    private static final long TIEMPO_SIMULACION = System.currentTimeMillis() + 5000;

    // üíº Solo 3 ventanillas disponibles (m√°ximo 3 hilos a la vez)
    private static final Semaphore semaforo = new Semaphore(3, true);

    // üßÆ Generador de ID √∫nico para cada cliente (seguro entre hilos)
    private static final AtomicInteger generadorID = new AtomicInteger(0);

    // üßæ Contadores globales at√≥micos (thread-safe)
    private static final AtomicInteger totalClientesAtendidos = new AtomicInteger(0);
    private static final AtomicInteger ventanillasOcupadas = new AtomicInteger(0); // Para control

    // üìä Mapa: cu√°ntos clientes atendi√≥ cada cajero (la clave es el nombre)
    private static final Map<String, Integer> clientesPorCajero = new HashMap<>();

    // üîí Lock para proteger el acceso al mapa "clientesPorCajero"
    private static final ReentrantLock lock = new ReentrantLock();

    // --- Variables de Instancia (propias de cada cajero) ---

    // <-- MODIFICADO: Campo para guardar el ID √∫nico de este cajero
    private final int idCajero;

    // <-- MODIFICADO: Constructor para recibir el ID del cajero
    /**
     * Crea una nueva tarea de cajero.
     * @param idCajero El ID num√©rico para este trabajador/cajero.
     */
    public BancoIdauto(int idCajero) {
        this.idCajero = idCajero;
    }


    // --- PUNTO DE ENTRADA DEL PROGRAMA ---
    public static void main(String[] args) {
        System.out.println("üè¶ Iniciando simulaci√≥n del banco con IDs autom√°ticos...\n");

        // Lista para guardar los threads (cajeros) y poder esperar a que terminen
        List<Thread> cajeros = new ArrayList<>();

        // Creamos 8 cajeros (8 hilos)
        for (int i = 1; i <= 8; i++) {
            // Creamos un hilo.
            // Le pasamos una "tarea": una *nueva instancia* de BancoIDAutomatico
            // Y LE PASAMOS EL ID (i) a su constructor.
            // Tambi√©n le ponemos un nombre (ej: "Cajero_1")

            // <-- MODIFICADO: Pasamos 'i' al constructor
            Thread cajero = new Thread(new BancoIdauto(i), "Cajero_" + i);

            cajeros.add(cajero); // Lo guardamos en la lista
            cajero.start(); // Iniciamos el hilo. Ahora empieza a ejecutar su m√©todo run().
        }

        // Esperar a que todos los cajeros terminen su jornada
        for (Thread t : cajeros) {
            try {
                t.join();
            } catch (InterruptedException e) {
                System.err.println("Error esperando al hilo: " + t.getName());
            }
        }

        // Cuando todos los hilos han terminado, mostramos estad√≠sticas.
        mostrarEstadisticas();
    }

    // --- C√ìDIGO QUE EJECUTAR√Å CADA HILO (CAJERO) ---
    @Override
    public void run() {
        // Cada hilo representa un cajero
        String nombre = Thread.currentThread().getName(); // "Cajero_X"
        // 'this.idCajero' ya tiene el ID num√©rico (ej: 1)
        Random random = new Random(); // Para simular tiempos de atenci√≥n

        // Mientras dure la simulaci√≥n
        while (System.currentTimeMillis() < TIEMPO_SIMULACION) {
            try {
                // 1. PEDIR PERMISO (Adquirir una ventanilla)
                semaforo.acquire();
                ventanillasOcupadas.incrementAndGet();

                // --- INICIO DE LA SECCI√ìN CR√çTICA (VENTANILLA OCUPADA) ---

                // 2. CREAR CLIENTE
                int idCliente = generadorID.incrementAndGet();

                // <-- MODIFICADO: Usamos this.idCajero en el mensaje
                System.out.println(nombre + " (ID: " + this.idCajero + ") atendiendo al cliente con ID: " + idCliente
                        + " [Ventanillas: " + ventanillasOcupadas.get() + "]");

                // 3. SIMULAR TIEMPO DE ATENCI√ìN
                Thread.sleep(200 + random.nextInt(200));

                // 4. CLIENTE ATENDIDO (Actualizar contadores)
                totalClientesAtendidos.incrementAndGet();

                // 5. ACTUALIZAR MAPA (ESTAD√çSTICA POR CAJERO)
                lock.lock();
                try {
                    // Usamos 'nombre' ("Cajero_X") como clave en el mapa
                    clientesPorCajero.put(nombre, clientesPorCajero.getOrDefault(nombre, 0) + 1);
                } finally {
                    lock.unlock();
                }

                // <-- MODIFICADO: Usamos this.idCajero en el mensaje
                System.out.println("‚úÖ " + nombre + " (ID: " + this.idCajero + ") termin√≥ con el cliente ID " + idCliente);

            } catch (InterruptedException e) {
                System.err.println("‚ö†Ô∏è " + nombre + " (ID: " + this.idCajero + ") interrumpido.");
            } finally {
                // --- FIN DE LA SECCI√ìN CR√çTICA ---

                // 6. LIBERAR VENTANILLA
                ventanillasOcupadas.decrementAndGet();
                semaforo.release();
            }
        } // Fin del bucle while

        // <-- MODIFICADO: Usamos this.idCajero en el mensaje
        System.out.println("üèÅ " + nombre + " (ID: " + this.idCajero + ") termin√≥ su jornada laboral.");
    }

    // ---------------------------------------------------------------

    // üìä M√©todo est√°tico para mostrar estad√≠sticas al final
    private static void mostrarEstadisticas() {
        System.out.println("\n===== üìä ESTAD√çSTICAS DEL BANCO =====");

        int totalMapa = 0;

        lock.lock();
        try {
            // Ordenamos las claves (Cajero_1, Cajero_10, Cajero_2...)
            // para que se muestren en orden num√©rico (Cajero_1, Cajero_2, Cajero_10...)
            List<String> nombresCajerosOrdenados = new ArrayList<>(clientesPorCajero.keySet());
            Collections.sort(nombresCajerosOrdenados);

            // Recorremos las claves ya ordenadas
            for (String nombreCajero : nombresCajerosOrdenados) { // ej: "Cajero_1"
                int cantidad = clientesPorCajero.get(nombreCajero);
                totalMapa += cantidad;

                // <-- MODIFICADO: Extraemos el ID del nombre para mostrarlo
                // Hacemos split en "Cajero_1" para quedarnos con el "1"
                String idStr = nombreCajero.split("_")[1];

                System.out.println("üë®‚Äçüíº " + nombreCajero + " (ID: " + idStr + ") atendi√≥ a " + cantidad + " clientes.");
            }
        } finally {
            lock.unlock(); // Liberamos el candado
        }

        System.out.println("---------------------------------------------");
        System.out.println("üßæ Total clientes (seg√∫n mapa): " + totalMapa);
        System.out.println("üöÄ Total global contado: " + totalClientesAtendidos.get());
        System.out.println("=============================================\n");
    }
}